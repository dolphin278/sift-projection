// Generated by CoffeeScript 1.6.3
(function() {
  var treeGet, treeSet,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  treeGet = function(obj, path) {
    var nextProp, props;
    if (typeof obj !== "object") {
      return obj;
    }
    if (path === '') {
      return obj;
    }
    props = path.split('.');
    nextProp = props.shift();
    return treeGet(obj[nextProp], props.join('.'));
  };

  treeSet = function(obj, path, value) {
    var nextProp, props;
    if (__indexOf.call(path, '.') < 0) {
      return obj[path] = value;
    } else {
      props = path.split('.');
      nextProp = props.shift();
      if (obj[nextProp] == null) {
        obj[nextProp] = {};
      }
      return treeSet(obj[nextProp], props.join('.'), value);
    }
  };

  module.exports = function(projection, data) {
    var allButPresented, field, item, res, result, value, _i, _len;
    if (!Array.isArray(data)) {
      return new Error('data must be array');
    }
    result = [];
    allButPresented = true;
    for (item in projection) {
      if (!__hasProp.call(projection, item)) continue;
      if (projection[item] > 0) {
        allButPresented = false;
        break;
      }
    }
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      item = data[_i];
      res = {};
      if (allButPresented) {
        for (field in item) {
          if (!__hasProp.call(item, field)) continue;
          if (typeof projection[field] === 'undefined') {
            res[field] = item[field];
          }
        }
      } else {
        for (field in projection) {
          if (!__hasProp.call(projection, field)) continue;
          if (typeof projection[field] !== 'undefined') {
            if (typeof projection[field].$slice === 'number') {
              res[field] = item[field].slice(0, projection[field].$slice);
            }
          }
          if (__indexOf.call(field, '.') >= 0) {
            value = treeGet(item, field);
            if (Array.isArray(value) && typeof projection[field].$slice === 'number') {
              value = value.slice(0, projection[field].$slice);
            }
            if (typeof value !== "undefined") {
              treeSet(res, field, value);
            }
          } else {
            if (res[field] == null) {
              res[field] = item[field];
            }
          }
        }
      }
      result.push(res);
    }
    return result;
  };

}).call(this);
